#!/usr/bin/python
# -*- coding: utf-8 -*-

import os
import yaml
import sys
import getopt
from classes.docker import Docker
import threading

def local_help():
  print "Docker Registry Synchronizer version 0.0.1"
  print "sync-registry --config-file=<config-file-path> [ Loads the configuration file <yaml file> to sync a private registry from a public registry ]"
  print "sync-registry --help [ This help ]"
  exit(0)

def process_image(image):

  docker = Docker(properties['images'][image]['remote-url'], properties['local-url'], image)
 
  url = properties['images'][image]['remote-url']
  version = properties['images'][image]['version']
  tag = properties['images'][image]['tag']
  
  bufferofimgs = []
  
  print("[%s:%s] Attempt to fetch image" % (image, tag))
  docker.setTag(tag)
  response = docker.imageExists(tag)
  if(not response):
    print("[%s:%s] fetching image" % (image, tag))
    if(docker.fetchImage()):
      print("[%s:%s] An error ocurred fetching image" % (image, tag))
      exit()
    print ("[%s:%s] tagging image to the local repository: %s" % (image, tag, properties['local-url'].rstrip(os.linesep)))
    if(docker.setTagImage()):
      print ("[%s:%s] An error ocurred tagging image to the local repository" % (image, tag, properties['local-url'].rstrip(os.linesep)))
      exit()
    print ("[%s:%s] uploading image to the local repository: %s" % (image, tag, properties['local-url'].rstrip(os.linesep)))
    if(docker.uploadImage()):
      print ("[%s:%s] An error ocurred uploading image to the local repository" % (image, tag))
      exit()
    print ("[%s:%s] Image successfully uploaded" % (image, tag))
    bufferofimgs.append(image + ":" + tag)
  else:
    print ("[%s:%s] Skipping image! Image already in the local repository" % (image, tag))
  for item in bufferofimgs:
    print ("[%s] removing image of the local/remote repository" % (item))
    if(docker.removeRemoteImage(item)):
      exit()
    if(docker.removeLocalImage(item)):
      exit() 


thread_list = []
opts ,args = getopt.getopt(sys.argv[1:],'c,h',['config-file=', 'help'])
config_file = ''
help = ''

for opt, arg in opts:
  if (opt in "--config-file="):
    config_file = arg
  elif (opt in "--help"):
    local_help()

properties = yaml.load(open(config_file))

for i in properties['images']:
  t = threading.Thread(target=process_image, args=(i,))
  thread_list.append(t)

for thread in thread_list:
    thread.start()

for thread in thread_list:
    thread.join()      
